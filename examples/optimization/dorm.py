'''
Решим задачу о распределении студентов по комнатам в общежитии с учетом их основного и альтернативного пожеланий. Хотя формулировка довольно специфична, ее можно легко обобщить на похожие задачи, – тот же самый код годится для распределения игроков по столам в онлайновой карточной игре, для распределения ошибок между разработчиками в большом программном проекте и даже для распределения работы по дому между прислугой. Как и раньше, наша цель – собрать информацию об отдельных людях и найти такое сочетание, которое приводит к оптимальному результату.
'''

import random
import math

# Двухместные комнаты
dorms = ['Zeus','Athena','Hercules','Bacchus','Pluto']

# Люди и два пожелания у каждого
prefs = [
    ('Toby', ('Bacchus', 'Hercules')),
    ('Steve', ('Zeus', 'Pluto')),
    ('Andrea', ('Athena', 'Zeus')),
    ('Sarah', ('Zeus', 'Pluto')),
    ('Dave', ('Athena', 'Bacchus')),
    ('Jeff', ('Hercules', 'Pluto')),
    ('Fred', ('Pluto', 'Athena')),
    ('Suzie', ('Bacchus', 'Hercules')),
    ('Laura', ('Bacchus', 'Hercules')),
    ('Neil', ('Hercules', 'Athena'))
]

'''
Сразу видно, что удовлетворить основное пожелание каждого человека не удастся, так как на два места в комнате Bacchus имеется три претендента. Поместить любого из этих трех в ту комнату, которую он указал в качестве альтернативы, тоже невозможно, так как в комнате Hercules всего два места.

Более правильный подход – отыскать такой способ представления решений, при котором любое представимое решение допустимо. Допустимое еще не означает хорошее, просто в каждой комнате должно оказаться ровно два студента. Можно, например, поступить следующим образом. Будем считать, что в каждой комнате есть два отсека, то есть всего их в нашем случае будет десять. Каждому студенту по очереди назначается один из незанятых отсеков; первого можно поместить в любой из десяти отсеков, второго – в любой из оставшихся девяти и т. д.

'''

# [(0,9),(0,8),(0,7),(0,6),...,(0,0)]
domain = [
    (0, (len(dorms) * 2) - i - 1)
    for i in range(0, len(dorms) * 2)
]

'''
Следующая функция, печатающая решение, иллюстрирует принцип работы отсеков. Сначала она создает список отсеков, по два на каждую комнату. Затем она в цикле пробегает по всем числам, составляющим решение, и для каждого находит номер комнаты в данной позиции списка отсеков. Это та комната, в которую поместили студента. Функция печатает имя студента и название комнаты, а затем удаляет отсек из списка, чтобы в него нельзя было поместить другого студента. После завершающей итерации распределение студентов по комнатам распечатано, а список отсеков пуст.
'''
def printsolution(vec):
    slots = []
    # Create two slots for each dorm
    for i in range(len(dorms)): 
        slots += [i, i]

    # Loop over each students assignment
    for i in range(len(vec)):
        x = int(vec[i])

        # Choose the slot from the remaining ones
        dorm = dorms[slots[x]]
        # Show the student and assigned dorm
        print(prefs[i][0], dorm)
        # Remove this slot
        del slots[x]


def printsolution(vec):
  slots=[]
  # Create two slots for each dorm
  for i in range(len(dorms)): slots+=[i,i]

  # Loop over each students assignment
  for i in range(len(vec)):
    x=int(vec[i])

    # Choose the slot from the remaining ones
    dorm=dorms[slots[x]]
    # Show the student and assigned dorm
    print prefs[i][0],dorm
    # Remove this slot
    del slots[x]